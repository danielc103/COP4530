COP 4530 Homework 2
Using a Trojan Horse Comparison Operator to Analyze Algorithm Runtimes
<Daniel C Carroll>
<ccarroll>
<dcc12b>


///////QUESTIONS///////////

1. Lef f(n) = n(n+1)/2. Of the following possiblities, state which are true
about f and of those, which one best describes the asymptotic class of f?

a. Theta(n^2) - no, n^2 would not bind it from the lower bound
b. O(n^2) - yes, any postive constant would f(n) < g(n)
c. Omega(n^2) - no, no constant will bind g(n) lower than f(n)

d. Theta(n(n+1)/2) - no, there is no constant that will bound g(n) lower and upper.
e. O(n(n+1)/2) - yes, there is some constant such that f(n) < Cg(n)
f. Omega(n(n+1)/2) - no, there is no constant to bound lower end

g. Theta(n^3) - no, f(n) is not big omega so no lower bound
h. O(n^3) - yes, f(n) < Cg(n)
i. Omega(n^3) - no, there is no constant C to make f(n) > Cg(n)

j. Theta(n log n) - no, it is not big O g(n)
k. O(n log n) - no, there is no constant so that f(n) < Cg(n)
l. Omega(n log n) - yes, f(n) > Cg(n)

m. Theta(n) - no, there is no big O g(n)
n. O(n) - no, there is no constant so that f(n) < Cg(n)
o. Omega(n) - yes, there exisits constants such that f(n) > Cg(n)


2. Which one these statements is best supported by data obtained using
search_spy

b.  fsu::g_lower_bound has an asymptotic runtime of O(log n) but not Omega(log
n)
This is true because binary searches run at log n and from the data provided the
size of the container is approximately avg comps squared. Also the max comps is
slightly higher than the avg comps showing that its growth is O(log n)..can't be
Omega because any constant would only increase the rate of the log.

d. seq::g_lower_bound has an asympototic runtime of Theta(n)
This is true because sequential runtime has to go through each item.  So n would
represent every item in container. Number of iterations will increase
proportionally to the size fo the list.  Evidence is shown of this with the max
comps and min comps increasing in numbers the larger the size of the container
is.   

3. State an asymptotic runtime for each sort algorithm that is best supported 
by data gathered with sort_spy. Argue your answer using collected data, and 
also discuss characteristics of the algorithm body that support your answer.

selection sort: O(n(n+1)/2): which is O(n^2) : if you look at the data shown the
selection sort is exactly what the equation is given.  Simplified the class
starts with n^2.  In the algorithm itself splits the list into two
half...ie..dividing by 2 and is horribly inefficent with large lists, hence such
the high count

insertion sort: O(n(n+1)/4): which is O(n^2) : this too is shown in the data to
be less efficient on large containers.  It is slightly more effeicent than the
bulky selection sort with comp counts being halved again.  In the algorithm this
is due to the fact you must go through entire container and swap.  

heap sort: O(2n log n): O(nlogn) : the data shows this proves to be a much more
efficient way on larger lists. It is clunky by and slow due to the fact that it
heaps the data in the algorithm.  This creates that low/slow n log n. Then once
it's heaped its sorted in a binary tree. 
 
List sort: O(n log n):O(nlogn) : This sort uses the least amount of counts and
is slow. The data shows that this runs along the same lines as n log n.  This
algorithm uses heavy memory and requires random access making it clunky.


4. Describe two scenarios, one under which the namespace fsu search algorithms
are appropriate and one under which the namespace seq versions are appropritat

You would want to use the fsu search algorithms when time and size would be an
issue.  If it's an extremely large set this will help due its O(log n) runtime.
Say, you're searching a large database for serial numbers.  The query would 
return faster with binary opposed to sequential.

You would want to use the seq search algorithms when your information is small
or is streaming.  If it's a small set, then you're chances of exiting the loop
are better than if it were big.  Also when it's streaming you can't cut the
stream in half like a binary would, you would have to sequentially step through
until you found it.  Such an example would be the NSA streaming in information
and wanting to alert on a sentinal value. It would just be stepping through
everything that came in, while it comes in to check.



////////WORK LOG///////////

2.20
Read documentation
watched video
started header files

2.21
finished compare spy header
read up on big O notation

2.22
finsished gssearch header file
tested sort and search
cleaned up small errors

2.23
answered questions 
double checked code



///////OUTPUT///////////

///SEARCH_SPY///

Enter sentinel: .
Enter elements ('.' to end): 1209871239874098
.
D as entered:                1209871239874098
L as entered:                1209871239874098
g_heap_sort(<):              0011223477888999
List::Sort(<):               0011223477888999
           algorithm   min comps   avg comps   max comps   size  log size
	   [ceiling]
           ---------   ---------   ---------   ---------   ----  --------
  fsu::g_lower_bound           4        4.00           4     16         4
  fsu::g_upper_bound           4        4.00           4     16         4
  alt::g_lower_bound           4        4.00           4     16         4
  alt::g_upper_bound           4        4.00           4     16         4
  seq::g_lower_bound           5        9.33          14     16         4
  seq::g_upper_bound           7       10.67          16     16         4

Enter sentinel: .
Enter elements ('.' to end): 73659765294736592762974627934765.
D as entered:                73659765294736592762974627934765
L as entered:                73659765294736592762974627934765
g_heap_sort(<):              22223334445555666666777777799999
List::Sort(<):               22223334445555666666777777799999
           algorithm   min comps   avg comps   max comps   size  log size
	   [ceiling]
           ---------   ---------   ---------   ---------   ----  --------
  fsu::g_lower_bound           5        5.33           6     32         5
  fsu::g_upper_bound           5        5.17           6     32         5
  alt::g_lower_bound           5        5.33           6     32         5
  alt::g_upper_bound           5        5.17           6     32         5
  seq::g_lower_bound           1       15.00          28     32         5
  seq::g_upper_bound           1       18.17          32     32         5




///SORT_SPY///


 -n.1000----------------------------------------------

 Input file name: n.1000
            size: 1000

           algorithm     comp_count         n   n log n    n(n+1)/2
           ---------     ----------       ---   -------    --------
    g_selection_sort         500500      1000      9965      500500
    g_insertion_sort         253232      1000      9965      500500
         g_heap_sort          16895      1000      9965      500500
          List::Sort           8711      1000      9965      500500

 Process complete

Input file name: n.10000
            size: 10000

           algorithm     comp_count         n   n log n    n(n+1)/2
           ---------     ----------       ---   -------    --------
    g_selection_sort       50005000     10000    132877    50005000
    g_insertion_sort       24802121     10000    132877    50005000
         g_heap_sort         235429     10000    132877    50005000
          List::Sort         123632     10000    132877    50005000

 Process complete
